#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Function to check for root privileges
check_root() {
    if [[ "$EUID" -ne 0 ]]; then
        echo "Please run as root or with sudo."
        exit 1
    fi
}

# Function to install a package manager if not installed
install_package_manager() {
    local manager="$1"
    local install_command="$2"

    if ! command -v "$manager" &> /dev/null; then
        echo "$manager is not installed. Installing..."
        eval "$install_command"
    else
        echo "$manager is already installed."
    fi
}

# Function to update the package database for each manager
update_database() {
    if command -v pacman &> /dev/null; then
        pacman -Sy --noconfirm
    fi

    if command -v yay &> /dev/null; then
        yay -Sy --noconfirm
    fi

    echo "Package databases updated."
}

# Function to install a package using available package managers
install_package() {
    local package="$1"

    echo "Installing $package..."

    if command -v pacman &> /dev/null; then
        pacman -S --noconfirm "$package" && return
    fi

    if command -v yay &> /dev/null; then
        yay -S --noconfirm "$package" && return
    fi

    echo "Failed to install $package with any package manager."
}

# Function to update all packages
update_packages() {
    echo "Updating packages..."

    if command -v pacman &> /dev/null; then
        pacman -Syu --noconfirm
    fi

    if command -v yay &> /dev/null; then
        yay -Syu --noconfirm
    fi

    echo "All packages updated."
}

# Main script logic
check_root

# Install package managers if not installed
install_package_manager "yay" "pacman -S --noconfirm yay"

# Update package databases
update_database

case "$1" in
    install)
        shift
        for package in "$@"; do
            install_package "$package"
        done
        ;;
    update)
        update_packages
        ;;
    *)
        echo "Usage: $0 {install|update} [package_name...]"
        exit 1
        ;;
esac
